name: Build Server And Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Build Initializer
      run: go build -o ./initializer ./cmd/initializer

    - name: Build Updater
      run: go build -o ./updater ./cmd/updater

    - name: Build Notifier
      run: go build -o ./notifier ./cmd/notifier

    - name: Build Bot
      run: go build -o ./bot ./cmd/bot

    - name: Image Replaced
      run: go build -o ./image-replacer ./cmd/images

    - name: Upload initializer
      uses: actions/upload-artifact@v4
      with:
        name: initializer
        path: ./initializer
      
    - name: Upload updater
      uses: actions/upload-artifact@v4
      with:
        name: updater
        path: ./updater

    - name: Upload notifier
      uses: actions/upload-artifact@v4
      with:
        name: notifier
        path: ./notifier
    
    - name: Upload Bot
      uses: actions/upload-artifact@v4
      with:
        name: bot
        path: ./bot
    
    - name: Upload Image Replacer
      uses: actions/upload-artifact@v4
      with:
        name: image_replacer
        path: ./image-replacer


  deploy:
    runs-on: ubuntu-latest

    needs: build

    steps:
    - name: Download Initializer
      uses: actions/download-artifact@v4
      with: 
        name: initializer

    - name: Download Updater
      uses: actions/download-artifact@v4
      with:
        name: updater 

    - name: Download Notifier
      uses: actions/download-artifact@v4
      with:
        name: notifier 

    - name: Download Bot
      uses: actions/download-artifact@v4
      with:
        name: bot 
    
    - name: Download Image Replacer
      uses: actions/download-artifact@v4
      with:
        name: image_replacer 

    - name: Deploy to VPS
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts
        
        # Enters VPS, Removes Go files, exits from VPS
        ssh -i ~/.ssh/id_rsa $VPS_USER@$VPS_HOST "cd ~/repetition/go/ && rm -r ./* && exit;"
       
        # Deploy the built Go program to your VPS
        scp -p -i ~/.ssh/id_rsa \
        ./updater \
        ./notifier \
        ./initializer \
        ./bot \
        ./image-replacer \
        "$VPS_USER@$VPS_HOST:~/repetition/go/"

        ssh -i ~/.ssh/id_rsa $VPS_USER@$VPS_HOST "cd ./repetition/go/ && sudo chmod +x ./* && sudo systemctl stop ktor.service && sudo systemctl start ktor.service" 
        